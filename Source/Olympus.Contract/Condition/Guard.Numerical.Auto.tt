<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var numericalLookup = new Dictionary<string, NumericalInfo>
    {
        ["int"] = new NumericalInfo(false, true, "0"),
        ["long"] = new NumericalInfo(false, true, "0L"),
        ["float"] = new NumericalInfo(true, true, "0.0F"),
        ["double"] = new NumericalInfo(true, true, "0.0"),
        ["ushort"] = new NumericalInfo(false, false, "0")
    };
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Guard.All.Numerical.cs" company="nGratis">
//  The MIT License — Copyright (c) Cahya Ong
//  See the LICENSE file in the project root for more information.
// </copyright>
// <author>Cahya Ong — cahya.ong@gmail.com</author>
// <creation_timestamp>Friday, 17 March 2017 11:20:18 PM UTC</creation_timestamp>
// <remark>
//
//     _  _   _ _____ ___       ___ ___ _  _ ___ ___    _ _____ ___ ___    _____ _ _
//    /_\| | | |_   _/ _ \ ___ / __| __| \| | __| _ \  /_\_   _| __|   \  |_   _| | |
//   / _ \ |_| | | || (_) |___| (_ | _|| .` | _||   / / _ \| | | _|| |) |   | | |_  _|
//  /_/ \_\___/  |_| \___/     \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/    |_|   |_|
//
// </remark>
// --------------------------------------------------------------------------------------------------------------------

namespace nGratis.Cop.Olympus.Contract
{
    using System;
    using System.Diagnostics;

    public static partial class Guard
    {
<#
    var numericalIndex = 0;

    foreach (var numerical in numericalLookup.Keys)
    {
        var isFloatingPoint = numericalLookup[numerical].IsFloatingPoint;

        var epsilonValue = isFloatingPoint
            ? $"{numerical}.Epsilon"
            : numericalLookup[numerical].ZeroValue;

        var zeroComparison = isFloatingPoint
            ? $"actual >= -{epsilonValue} && actual <= {epsilonValue}"
            : $"actual == {epsilonValue}";

        var equalComparison = isFloatingPoint
            ? $"Math.Abs(actual - expected) <= {numerical}.Epsilon"
            : "actual == expected";
#>
        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> LessThan(this ClassValidator<<#=numerical#>> validator, <#=numerical#> expected)
        {
            return validator.Validate(
                actual => actual < expected,
                $"be less than [{expected}]");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> LessThanOrEqualTo(this ClassValidator<<#=numerical#>> validator, <#=numerical#> expected)
        {
            return validator.Validate(
                actual => actual <= expected,
                $"be less than or equal to [{expected}]");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> GreaterThan(this ClassValidator<<#=numerical#>> validator, <#=numerical#> expected)
        {
            return validator.Validate(
                actual => actual > expected,
                $"be greater than [{expected}]");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> GreaterThanOrEqualTo(this ClassValidator<<#=numerical#>> validator, <#=numerical#> expected)
        {
            return validator.Validate(
                actual => actual >= expected,
                $"be greater than or equal to [{expected}]");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> Positive(this ClassValidator<<#=numerical#>> validator)
        {
            return validator.Validate(
                actual => actual > <#=numericalLookup[numerical].ZeroValue#>,
                "be a positive number");
        }

<# 
    if (numericalLookup[numerical].HasNegativeValue)
    {
#>
        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> ZeroOrPositive(this ClassValidator<<#=numerical#>> validator)
        {
            return validator.Validate(
                actual => actual >= <#=numericalLookup[numerical].ZeroValue#>,
                "be zero or a positive number");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> Negative(this ClassValidator<<#=numerical#>> validator)
        {
            return validator.Validate(
                actual => actual < <#=numericalLookup[numerical].ZeroValue#>,
                "be a negative number");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> ZeroOrNegative(this ClassValidator<<#=numerical#>> validator)
        {
            return validator.Validate(
                actual => actual <= <#=numericalLookup[numerical].ZeroValue#>,
                "be zero or a negative number");
        }

<# 
    } 
#>
        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> Zero(this ClassValidator<<#=numerical#>> validator)
        {
            return validator.Validate(
                actual => <#=zeroComparison#>,
                "be zero");
        }

        [DebuggerStepThrough]
        public static ValidationContinuation<<#=numerical#>> EqualTo(this ClassValidator<<#=numerical#>> validator, <#=numerical#> expected)
        {
            return validator.Validate(
                actual => <#=equalComparison#>,
                $"be equal to [{expected}]");
        }
<#
        if (numericalIndex < numericalLookup.Count - 1)
        {
#>

<#
        }

        numericalIndex++;
    }
#>
    }
}
<#+
    public class NumericalInfo
    {
        public NumericalInfo(bool isFloatingPoint, bool hasNegativeValue, string zeroValue)
        {
            this.IsFloatingPoint = isFloatingPoint;
            this.ZeroValue = zeroValue;
            this.HasNegativeValue = hasNegativeValue;
        }

        public bool IsFloatingPoint { get; }

        public bool HasNegativeValue { get; }

        public string ZeroValue { get; }
    }
#>
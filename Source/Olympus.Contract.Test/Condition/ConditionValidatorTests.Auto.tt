<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var negationLookup = new Dictionary<string, string>
    {
        ["ClassValidator"] = "Not",
        ["PropertyValidator"] = "No"
    };

    var validatorKinds = new[]
    {
        "PreCondition",
        "PostCondition"
    };
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Guard.All.Numerical.cs" company="nGratis">
//  The MIT License — Copyright (c) Cahya Ong
//  See the LICENSE file in the project root for more information.
// </copyright>
// <author>Cahya Ong — cahya.ong@gmail.com</author>
// <creation_timestamp>Saturday, 31 March 2018 5:14:34 AM UTC</creation_timestamp>
// <remark>
//
//     _  _   _ _____ ___       ___ ___ _  _ ___ ___    _ _____ ___ ___    _____ _ _  
//    /_\| | | |_   _/ _ \ ___ / __| __| \| | __| _ \  /_\_   _| __|   \  |_   _| | | 
//   / _ \ |_| | | || (_) |___| (_ | _|| .` | _||   / / _ \| | | _|| |) |   | | |_  _|
//  /_/ \_\___/  |_| \___/     \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/    |_|   |_| 
//
// </remark>
// --------------------------------------------------------------------------------------------------------------------

namespace nGratis.Cop.Olympus.Contract.Test
{
    using System;
    using FluentAssertions;
    using Xunit;

<#
    var negationIndex = 0;

    foreach (var type in negationLookup.Keys)
    {
#>
    public class <#=type#>Tests
    {
        public class <#=negationLookup[type]#>Property
        {
<#

        var kindIndex = 0;

        foreach (var validatorKind in validatorKinds)
        {
            var messagePrefix = validatorKind == "PreCondition"
                ? "PRE-CONDITION"
                : validatorKind == "PostCondition" ? "POST-CONDITION" : "<unknown>";

#>
            [Fact]
            public void WhenGettingValid<#=validatorKind#>Value_ShouldNotThrowException()
            {
                // Arrange.

                var validator = new <#=type#><string>(
                    "[_MOCK_NAME_]",
                    "[_MOCK_VALUE_]",
                    ValidatorKind.<#=validatorKind#>);

                validator = validator.<#=negationLookup[type]#>;

                // Act.

                var validate = new Action(() => validator.Validate(
                    value => value == "[_MOCK_ANOTHER_VALUE_]",
                    "[_MOCK_REASON_]"));

                // Assert.

                validate.Should().NotThrow();
            }

            [Fact]
            public void WhenGettingInvalid<#=validatorKind#>Value_ShouldThrowOlympus<#=validatorKind#>Exception()
            {
                // Arrange.

                var validator = new <#=type#><string>(
                    "[_MOCK_NAME_]",
                    "[_MOCK_VALUE_]",
                    ValidatorKind.<#=validatorKind#>);

                validator = validator.<#=negationLookup[type]#>;

                // Act.

                var validate = new Action(() => validator.Validate(
                    value => value == "[_MOCK_VALUE_]",
                    "[_MOCK_REASON_]"));

                // Assert.

                validate
                    .Should().Throw<Olympus<#=validatorKind#>Exception>()
                    .WithMessage("<#=messagePrefix#>: Variable [[_MOCK_NAME_]] should NOT [_MOCK_REASON_]!");
            }
<#
            if (kindIndex < validatorKinds.Length - 1)
            {
#>

<#
            }

            kindIndex++;
        }

#>
        }
    }
<#

        if (negationIndex < negationLookup.Count - 1)
        {
#>

<#
        }

        negationIndex++;
    }
#>
}
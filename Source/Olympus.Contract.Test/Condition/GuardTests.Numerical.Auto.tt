<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var numericalLookup = new Dictionary<string, NumericalInfo>
    {
        ["int"] = new NumericalInfo(typeof(int).Name, false, true, "0"),
        ["long"] = new NumericalInfo(typeof(long).Name, false, true,"0L"),
        ["float"] = new NumericalInfo(typeof(float).Name, true, true,"0.0F"),
        ["double"] = new NumericalInfo(typeof(double).Name, true, true,"0.0"),
        ["ushort"] = new NumericalInfo(typeof(ushort).Name, false, false, "(ushort)0")
    };

    var methodLookup = new Dictionary<string, MethodInfo>
    {
        ["LessThan"] = new MethodInfo(true, true, "MinValue", "MaxValue", "be less than [_HALF_VALUE_]"),
        ["LessThanOrEqualTo"] = new MethodInfo(true, true, "MinValue", "MaxValue", "be less than or equal to [_HALF_VALUE_]"),
        ["GreaterThan"] = new MethodInfo(true, true, "MaxValue", "MinValue", "be greater than [_HALF_VALUE_]"),
        ["GreaterThanOrEqualTo"] = new MethodInfo(true, true, "MaxValue", "MinValue", "be greater than or equal to [_HALF_VALUE_]"),
        
        ["Positive"] = new MethodInfo(false, true, "MaxValue", "MinValue", "be a positive number"),
        ["ZeroOrPositive"] = new MethodInfo(false, false, "MaxValue", "MinValue", "be zero or a positive number"),        
        ["Negative"] = new MethodInfo(false, false, "MinValue", "MaxValue", "be a negative number"),
        ["ZeroOrNegative"] = new MethodInfo(false, false, "MinValue", "MaxValue", "be zero or a negative number"),
        ["Zero"] = new MethodInfo(false, true, "ZeroValue", "MaxValue", "be zero"),
        
        ["EqualTo"] = new MethodInfo(true, true, "ZeroValue", "MaxValue", "be equal to [0]")
    };
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Guard.All.Numerical.cs" company="nGratis">
//  The MIT License — Copyright (c) Cahya Ong
//  See the LICENSE file in the project root for more information.
// </copyright>
// <author>Cahya Ong — cahya.ong@gmail.com</author>
// <creation_timestamp>Sunday, 1 April 2018 1:05:37 AM UTC</creation_timestamp>
// <remark>
//
//     _  _   _ _____ ___       ___ ___ _  _ ___ ___    _ _____ ___ ___    _____ _ _  
//    /_\| | | |_   _/ _ \ ___ / __| __| \| | __| _ \  /_\_   _| __|   \  |_   _| | | 
//   / _ \ |_| | | || (_) |___| (_ | _|| .` | _||   / / _ \| | | _|| |) |   | | |_  _|
//  /_/ \_\___/  |_| \___/     \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/    |_|   |_| 
//
// </remark>
// --------------------------------------------------------------------------------------------------------------------

// ReSharper disable InconsistentNaming
// ReSharper disable ConvertToConstant.Local

namespace nGratis.Cop.Olympus.Contract.Test
{
    using System;
    using FluentAssertions;
    using Xunit;

    public partial class GuardTests
    {
<#
    var numericalIndex = 0;

    foreach (var numerical in numericalLookup.Keys)
    {
        var methodIndex = 0;
        var alias = numericalLookup[numerical].Alias;
        var zeroValue = numericalLookup[numerical].ZeroValue;

        foreach (var method in methodLookup.Keys)
        {
            var shouldIncludeTest = 
                numericalLookup[numerical].HasNegativeValue || 
                methodLookup[method].IsUnsignedOnlyCheck;

            if (!shouldIncludeTest)
            {
                continue;
            }

            var validValue = methodLookup[method].ValidValue;
            validValue = validValue == "ZeroValue" 
                ? zeroValue 
                : $"{numerical}.{validValue}";
            
            var invalidValue = methodLookup[method].InvalidValue;
            invalidValue = invalidValue == "ZeroValue" 
                ? zeroValue 
                : $"{numerical}.{invalidValue}";

            var methodArgument = methodLookup[method].HasArgument
                ? methodLookup[method].ValidValue == "ZeroValue"
                    ? zeroValue
                    : $"({numerical}.MinValue + {numerical}.MaxValue) / 2"
                : string.Empty;

            var invalidReason = methodLookup[method].InvalidReason;
            invalidReason = invalidReason.Replace("[_HALF_VALUE_]", string.Format("[{{{0}}}]", methodArgument));
#>
        public class <#=method#>Method_<#=alias#>
        {
            [Fact]
            public void WhenGettingValidPreCondition_ShouldNotThrowException()
            {
                // Arrange.

                var value = <#=validValue#>;

                // Act.

                var action = new Action(() =>
                {
                    Guard
                        .Require(value, nameof(value))
                        .Is.<#=method#>(<#=methodArgument#>);
                });

                // Assert.

                action
                    .Should().NotThrow();
            }

            [Fact]
            public void WhenGettingInvalidPreCondition_ShouldThrowOlympusPreConditionException()
            {
                // Arrange.

                var value = <#=invalidValue#>;

                // Act.

                var action = new Action(() => 
                {
                    Guard
                        .Require(value, nameof(value))
                        .Is.<#=method#>(<#=methodArgument#>);
                });

                // Assert.

                action
                    .Should().Throw<OlympusPreConditionException>()
                    .WithMessage($"PRE-CONDITION: Variable [value] should <#=invalidReason#>!");
            }

            [Fact]
            public void WhenGettingValidPostCondition_ShouldNotThrowException()
            {
                // Arrange.

                var value = <#=validValue#>;

                // Act.

                var action = new Action(() => 
                {
                    Guard
                        .Ensure(value, nameof(value))
                        .Is.<#=method#>(<#=methodArgument#>);
                });

                // Assert.

                action
                    .Should().NotThrow();
            }

            [Fact]
            public void WhenGettingInvalidPostCondition_ShouldThrowOlympusPostConditionException()
            {
                // Arrange.

                var value = <#=invalidValue#>;

                // Act.

                var action = new Action(() => 
                {
                    Guard
                        .Ensure(value, nameof(value))
                        .Is.<#=method#>(<#=methodArgument#>);
                });

                // Assert.

                action
                    .Should().Throw<OlympusPostConditionException>()
                    .WithMessage($"POST-CONDITION: Variable [value] should <#=invalidReason#>!");
            }
        }
<#
            if (methodIndex < methodLookup.Count - 1)
            {
#>

<#
            }

            methodIndex++;
        }
#>
<#
        if (numericalIndex < numericalLookup.Count - 1)
        {
#>

<#
        }

        numericalIndex++;
    }
#>
    }
}
<#+
    internal class NumericalInfo
    {
        public NumericalInfo(string alias, bool isFloatingPoint, bool hasNegativeValue, string zeroValue)
        {
            this.Alias = alias;
            this.IsFloatingPoint = isFloatingPoint;
            this.HasNegativeValue = hasNegativeValue;
            this.ZeroValue = zeroValue;
        }

        public string Alias { get; }

        public bool IsFloatingPoint { get; }

        public bool HasNegativeValue { get; }

        public string ZeroValue { get; }
    }

    internal class MethodInfo
    {
        public MethodInfo(
            bool hasArgument, 
            bool isUnsignedOnlyCheck, 
            string validValue, 
            string invalidValue, 
            string invalidReason)
        {
            this.HasArgument = hasArgument;
            this.IsUnsignedOnlyCheck = isUnsignedOnlyCheck;
            this.ValidValue = validValue;
            this.InvalidValue = invalidValue;
            this.InvalidReason = invalidReason;
        }

        public bool HasArgument { get; }

        public bool IsUnsignedOnlyCheck { get; }

        public string ValidValue { get; }

        public string InvalidValue { get; }

        public string InvalidReason { get; }
    }
#>